name: chocolatine

on:
  push:
    branches-ignore:
     - 'ga-ignore-**'
  pull_request:
    branches-ignore:
     - 'ga-ignore-**'


env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/B-NWP-400-NAN-4-1-myteams-lucas.hauszler.git"
  EXECUTABLES: "myteams_cli,myteams_server"

jobs:
  check_coding_style:
    name: Checks if the repository source files are following the Epitech coding style
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Pull submodules
        run: git submodule update --init --recursive

      - name: Remove myteams project files that have coding style errors in them
        run: |
          COMMENT="The given lib has coding style errors in it and we can't fix them (functions with 5 arguments)"
          rm -rfd libs/myteams

      - name: Start checker
        run: |
          echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          TEMP_REPORTS_DIR=$(mktemp -d)
          echo "TEMP_REPORTS_DIR=${TEMP_REPORTS_DIR}" >> "$GITHUB_ENV"
          check.sh $(pwd) ${TEMP_REPORTS_DIR}

      - name: Find coding style errors and report them
        run: |
          CODING_STYLE_ERRORS=$({ cat ${{ env.TEMP_REPORTS_DIR }}/*.log || true; })
          if [ "$CODING_STYLE_ERRORS" != "" ]; then
            IFS=$'\r'$'\n'
            for LINE in $CODING_STYLE_ERRORS; do
              FILE=$(echo $LINE | cut -d':' -f1)
              LINE_NUMBER=$(echo $LINE | cut -d':' -f2)
              SEVERITY=$(echo $LINE | cut -d':' -f3 | tr -d '[:space:]')
              if [ "$SEVERITY" == "MINOR" ] || [ "$SEVERITY" == "MAJOR" ]; then
                echo "FAIL_TASK=true" >> "$GITHUB_ENV"
              fi
              CODE=$(echo $LINE | cut -d':' -f4)
              echo "::error file=${FILE},line=${LINE_NUMBER},col=1,title=${SEVERITY} coding style error::${CODE}"
            done
          fi

      - name: Fail if needed
        if: env.FAIL_TASK == 'true'
        run: exit 1

  check_program_compilation:
    name: Checks if the program compiles correctly and executables files got created
    runs-on: ubuntu-latest
    needs: [check_coding_style]
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.MYNET_TOKEN }}

      - run: make
        timeout-minutes: 2

      - run: make clean

      - name: Verifies that files are present and executable
        run: |
          echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          SEARCH_BINARIES="${{ env.EXECUTABLES }}"
          IFS=$','
          for BIN in $SEARCH_BINARIES; do
            if [ ! -f "${BIN}" ]; then
              echo "::error file=${BIN},title=Binary not found::${BIN}"
              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
            fi
            if [ ! -x "${BIN}" ]; then
              echo "::error file=${BIN},title=Binary not executable::${BIN}"
              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
            fi
          done

      - name: Fail if needed
        if: env.FAIL_TASK == 'true'
        run: exit 1

  run_tests:
    name: Run the program tests (using rule make tests_run)
    runs-on: ubuntu-latest
    needs: [check_program_compilation]
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.MYNET_TOKEN }}

      - name: Starts tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: Pushes the current repository files to a given mirror repository
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs: [run_tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'
          token: ${{ secrets.MYNET_TOKEN }}

      - name: Push mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
